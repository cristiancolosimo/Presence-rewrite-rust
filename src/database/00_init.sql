-- User table
CREATE TABLE IF NOT EXISTS User (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  username VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(100) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  enabled BOOLEAN NOT NULL DEFAULT 0
);

-- Logs table
CREATE TABLE IF NOT EXISTS Logs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  userId INTEGER,
  type INTEGER NOT NULL,
  message TEXT,
  createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES User(id)
);

-- PermissionUser table
CREATE TABLE IF NOT EXISTS PermissionUser (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  userId INTEGER NOT NULL,
  permissionId TEXT NOT NULL,
  createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES User(id) ON DELETE CASCADE
);

-- Config table
CREATE TABLE IF NOT EXISTS Config (
  configId TEXT NOT NULL UNIQUE,
  configValue TEXT NOT NULL,
  updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (configId)
);

-- Triggers to update updatedAt columns
CREATE TRIGGER IF NOT EXISTS update_User_updatedAt
AFTER UPDATE ON User
FOR EACH ROW
BEGIN
  UPDATE User SET updatedAt = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

CREATE TRIGGER IF NOT EXISTS update_Logs_updatedAt
AFTER UPDATE ON Logs
FOR EACH ROW
BEGIN
  UPDATE Logs SET updatedAt = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

CREATE TRIGGER IF NOT EXISTS update_PermissionUser_updatedAt
AFTER UPDATE ON PermissionUser
FOR EACH ROW
BEGIN
  UPDATE PermissionUser SET updatedAt = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

CREATE TRIGGER IF NOT EXISTS update_Config_updatedAt
AFTER UPDATE ON Config
FOR EACH ROW
BEGIN
  UPDATE Config SET updatedAt = CURRENT_TIMESTAMP WHERE configId = OLD.configId;
END;
